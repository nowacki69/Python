# Beautiful Soup Documentation
# https://www.crummy.com/software/BeautifulSoup/bs4/doc/

# Import the BeautifulSoup library
from bs4 import BeautifulSoup

print("Kinds of objects\n")

print("1.  Tag")
print()
print("    A Tag object corresponds to an XML or HTML tag in the original document:\n")
print("""        soup = BeautifulSoup('<b class="boldest">Extremely bold</b>', "html.parser" """)
soup = BeautifulSoup('<b class="boldest">Extremely bold</b>', "html.parser")
tag = soup.b
print(f"        type(tag): {type(tag)}")		# <class 'bsr.element.Tag'>
print()

print("    a.  Name\n")
print("        * Every tag has a name, accessible as .name:")
print(f"        * tag.name: {tag.name}\n")
print("        * If you change a tag’s name, the change will be reflected in any HTML markup")
print("          generated by Beautiful Soup:\n")

print("          tag.name = 'blockquote'")
tag.name = "blockquote"
print(f"          tag: {tag}\n")				# <blockquote class="boldest">Extremely bold</blockquote>

print("    b.  Attributes\n")
print('        A tag may have any number of attributes. The tag <b id="boldest"> has an')
print('        "attribute “id” whose value is “boldest”.')
print("        You can access a tag’s attributes by treating the tag like a dictionary:\n")

print("""            soup = BeautifulSoup('<b id="boldest">Extremely bold</b>', "html.parser"
            tag = soup.b
""")
soup = BeautifulSoup('<b id="boldest">Extremely bold</b>', "html.parser")
tag = soup.b
print(f"            tag['id']: {tag['id']}\n")		# 'boldest'

print("        You can access that dictionary directly as .attrs:\n")

print(f"            tag.attrs: {tag.attrs}\n")		# {'id': 'boldest'}

print("        You can add, remove, and modify a tag’s attributes. Again, this is done by")
print("        treating the tag as a dictionary:\n")

print("            tag['id'] = 'verybold'")
tag['id'] = 'verybold'

print("            tag['another-attribute'] = 1")
tag['another-attribute'] = 1

print(f"            tag: {tag}\n")				# <b another-attribute="1" id="verybold"></b>

print("            del tag['id']")
print("            del tag['another-attribute']")
del tag['id']
del tag['another-attribute']

print(f"            tag: {tag}\n")						# <b></b>

print("          Since we deleted the 'id' above, the following will produce a KeyError:\n")

print("              print(tag['id']): KeyError 'id'")
print(f"              tag.get('id'): {tag.get('id')}\n\n\n")	#None


print("        * Multi-valued attributes\n")

print("           - HTML 4 defines a few attributes that can have multiple values. HTML 5 removes a couple of them,")
print("             but defines a few more. The most common multi-valued attribute is class (that is, a tag can have")
print("             more than one CSS class). Others include rel, rev, accept-charset, headers, and accesskey.")
print("             Beautiful Soup presents the value(s) of a multi-valued attribute as a list:\n")

print("""                 css_soup = BeautifulSoup('<p class="body"></p>', 'html.parser')""")
css_soup = BeautifulSoup('<p class="body"></p>', 'html.parser')
print(f"                 css_soup.p['class']: {css_soup.p['class']}\n")			# ["body"]

print("""                 css_soup = BeautifulSoup('<p class="body strikeout"></p>', 'html.parser')""")
css_soup = BeautifulSoup('<p class="body strikeout"></p>', 'html.parser')
print(f"                     css_soup.p['class']: {css_soup.p['class']}\n")			# ["body", "strikeout"]

print("           - If an attribute looks like it has more than one value, but it’s not a multi-valued")
print("             attribute as defined by any version of the HTML standard, Beautiful Soup will leave")
print("             the attribute alone:\n")

print("""                 id_soup = BeautifulSoup('<p id="my id"></p>', 'html.parser')""")
id_soup = BeautifulSoup('<p id="my id"></p>', 'html.parser')
print(f"                 id_soup.p['id']: {id_soup.p['id']}\n")				# 'my id'

print("           - When you turn a tag back into a string, multiple attribute values are consolidated:\n")
print("""                 rel_soup = BeautifulSoup('<p>Back to the <a rel="index">homepage</a></p>','html.parser')""")
rel_soup = BeautifulSoup('<p>Back to the <a rel="index">homepage</a></p>','html.parser')
print(f"                 rel_soup.a['rel']:   {rel_soup.a['rel']}")			# ['index']
print("                 rel_soup.a['rel'] = ['index', 'contents']")
rel_soup.a['rel'] = ['index', 'contents']
print(f"                 rel_soup.p: {rel_soup.p}\n")	# <p>Back to the <a rel="index contents">homepage</a></p>

print("           - You can use `get_attribute_list to get a value that’s always a list, string,")
print("             whether or not it’s a multi-valued atribute\n")

print(f"                 id_soup.p.get_attribute_list('id'): {id_soup.p.get_attribute_list('id')}\n")
	                       # [“my id”]
print("           - If you parse a document as XML, there are no multi-valued attributes:\n")
print("""             xml_soup = BeautifulSoup('<p class="body strikeout"></p>','xml')""")
# xml_soup = BeautifulSoup('<p class="body strikeout"></p>','xml')
# # # print(f"   {xml_soup.p['class']}")			# u'body strikeout'
print()

print("2.  NavigableString\n")

print("    A string corresponds to a bit of text within a tag. Beautiful Soup uses the")
print("    NavigableString class to contain these bits of text:\n")

print(f"        tag.string: {tag.string}")			        # u'Extremely bold'
print(f"        type(tag.strinng){type(tag.string)}\n\n")   # <class 'bs4.element.NavigableString'>

print("    A NavigableString is just like a Python Unicode string, except that it also")
print("    supports some of the features described in Navigating the tree and Searching")
print("    the tree. You can convert a NavigableString to a Unicode string with unicode():")
print("    Python 3 renamed the unicode type to str, the old str type has been replaced by bytes.\n")

print("        unicode_string = str(tag.string)")
unicode_string = str(tag.string)
print(f"        unicode_string: {unicode_string}")				# 'Extremely bold'
print(f"        type(unicode_string): {type(unicode_string)}\n")			# <class 'str'>

print("    You can’t edit a string in place, but you can replace one string with another,")
print("    using replace_with():\n")

print('        tag.string.replace_with("No longer bold")')
tag.string.replace_with("No longer bold")
print(f"        tag: {tag}\n\n")			# <blockquote>No longer bold</blockquote>


print("3.  BeautifulSoup\n")
print("    The BeautifulSoup object itself represents the document as a whole. For most")
print("    purposes, you can treat it as a Tag object. This means it supports most of")
print("    the methods described in Navigating the tree and Searching the tree.\n")

print("    Since the BeautifulSoup object doesn’t correspond to an actual HTML or XML")
print("    tag, it has no name and no attributes. But sometimes it’s useful to look at")
print('    its .name, so it’s been given the special .name “[document]”\n')

print(f"        soup.name: {soup.name}\n\n")	# [document]


print("4.  Comments and other special strings\n")

print("    Tag, NavigableString, and BeautifulSoup cover almost everything you’ll see")
print("    in an HTML or XML file, but there are a few leftover bits. The only one")
print("    you’ll probably ever need to worry about is the comment:\n")

print("""        markup = "<b><!--Hey, buddy. Want to buy a used parser?--></b>"
        soup = BeautifulSoup(markup, 'html.parser')
        comment = soup.b.string""")
markup = "<b><!--Hey, buddy. Want to buy a used parser?--></b>"
soup = BeautifulSoup(markup, 'html.parser')
comment = soup.b.string

print(f"        type(comment): {type(comment)}\n")	# <class 'bs4.element.Comment'>

print("    The Comment object is just a special type of NavigableString:")
print(f"        comment: {comment}\n")	# u'Hey, buddy. Want to buy a used parser'

print("    But when it appears as part of an HTML document")
print("    a Comment is displayed with special formatting:")
print(f"\nsoup.b.prettify(): {soup.b.prettify()}\n")
                # <b>
                #  <!--Hey, buddy. Want to buy a used parser?-->
                # </b>

print("    Beautiful Soup defines classes for anything else that might show up in an")
print("    XML document: CData, ProcessingInstruction, Declaration, and Doctype. Just")
print("    like Comment, these classes are subclasses of NavigableString that add")
print("    something extra to the string. Here’s an example that replaces the comment")
print("    with a CDATA block:")

print("""
        from bs4 import CData
        cdata = CData("A CDATA block")
        comment.replace_with(cdata)
        print(soup.b.prettify())
""")
from bs4 import CData
cdata = CData("A CDATA block")
comment.replace_with(cdata)
print(soup.b.prettify())    # <b>
                            #  <![CDATA[A CDATA block]]>
                            # </b>
print("\n\n\n")


print("Navigating the tree\n")

print("""    Here’s the “Three sisters” HTML document again:\n

        <html><head><title>The Dormouse's story</title></head>
        <body>
        <p class="title"><b>The Dormouse's story</b></p>
        <p class="story">Once upon a time there were three little sisters; and their names were
        <a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,
        <a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
        <a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
        and they lived at the bottom of a well.</p>
        <p class="story">...</p>
    """)

html_doc = """
<html><head><title>The Dormouse's story</title></head>
<body>
<p class="title"><b>The Dormouse's story</b></p>

<p class="story">Once upon a time there were three little sisters; and their names were
<a href="http://example.com/elsie" class="sister" id="link1">Elsie</a>,
<a href="http://example.com/lacie" class="sister" id="link2">Lacie</a> and
<a href="http://example.com/tillie" class="sister" id="link3">Tillie</a>;
and they lived at the bottom of a well.</p>

<p class="story">...</p>
"""

print("        soup = BeautifulSoup(html_doc, 'html.parser')")
soup = BeautifulSoup(html_doc, 'html.parser')

print("\n    I’ll use this as an example to show you how to move from one part of a document to another.")

print("1. Going down\n")

print("    Tags may contain strings and other tags. These elements are the tag’s children.")
print("    Beautiful Soup provides a lot of different attributes for navigating and")
print("    iterating over a tag’s children.\n")

print("    Note that Beautiful Soup strings don’t support any of these attributes, because a")
print("    string can’t have children.\n")

print("    a. Navigating using tag names\n")
print("       The simplest way to navigate the parse tree is to say the name of the tag you")
print("       want. If you want the <head> tag, just say soup.head:")
print(f"           soup.head: {soup.head}")		# <head><title>The Dormouse's story</title></head>
print(f"           soup.title: {soup.title}\n")	# <title>The Dormouse's story</title>

print("       You can do use this trick again and again to zoom in on a certain part of the parse")
print("       tree. This code gets the first <b> tag beneath the <body> tag:")
print(f"            soup.body: {soup.body.b}\n")	# <b>The Dormouse's story</b>

print("       Using a tag name as an attribute will give you only the first tag by that name:")
print(f"       soup.a: {soup.a}\n")		# <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>

print("       If you need to get all the <a> tags, or anything more complicated than the first")
print("       tag with a certain name, you’ll need to use one of the methods described in")
print("       Searching the tree, such as find_all():\n")

print(f"           soup.find_all('a'): {soup.find_all('a')}\n\n")
                            # [<a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>,
                            #  <a class="sister" href="http://example.com/lacie" id="link2">Lacie</a>,
                            #  <a class="sister" href="http://example.com/tillie" id="link3">Tillie</a>]

print("           - .contents and .children\n")

print("               A tag’s children are available in a list called .contents:\n")

print("                   head_tag = soup.head")
head_tag = soup.head
print(f"                  soup.head: {soup.head}")
print(f"                  head_tag: {head_tag}\n")	# <head><title>The Dormouse's story</title></head>

print(f"                  soup.head.contents: {soup.head.contents}")
print(f"                  head_tag.contents: {head_tag.contents}")	# [<title>The Dormouse's story</title>]

print("                  title_tag = head_tag.contents[0]")
title_tag = head_tag.contents[0]
print(f"                  title_tag: {title_tag}\n")	# <title>The Dormouse's story</title>

print(f"                  title_tag.contents: {title_tag.contents}\n")

print("               The BeautifulSoup object itself has children. In this case, the <html> tag")
print("               is the child of the BeautifulSoup object.")
print(f"                   Len(soup.contents) = {len(soup.contents)}")	# 1
print(f"                   soup.contents[0] = {soup.contents[0].name}")	# None
print(f"                   soup.contents[1] = {soup.contents[1].name}\n")	# 'html'
print("               A string does not have .contents, because it can’t contain anything:")
print(f"                   text = title_tag.contents[0]")
text = title_tag.contents[0]
print(f"                   text: {text}")
print(f"                   text.contents: # AttributeError: 'NavigableString' object has no attribute 'contents'\n")

print("               Instead of getting them as a list, you can iterate over a tag’s children")
print("               using the .children generator:\n")

print("               Iterating over a tag's children with .children")
print("                   for child in title_tag.children:")
print("                       print(child)\n")

for child in title_tag.children:
    print(f"                   child: {child}")		# The Dormouse's story
print('\n\n')

print("           - .descendants\n")

print("             The .contents and .children attributes only consider a tag’s direct children.")
print("             For instance, the <head> tag has a single direct child– the <title> tag:\n")

print(f"                 head_tag.contents: {head_tag.contents}\n")	# [<title>The Dormouse's story</title>]

print('             But the <title> tag itself has a child: the string “The Dormouse’s story”.')
print("             There’s a sense in which that string is also a child of the <head> tag.")
print("             The .descendants attribute lets you iterate over all of a tag’s children,")
print("             recursively: its direct children, the children of its direct children, and so on:\n")

print("                 for child in head_tag.descendants:")
print("                     print(child)")	                 # <title>The Dormouse's story</title>
print()
for child in head_tag.descendants:
    print(f"                 child: {child}")	# <title>The Dormouse's story</title>
 									# The Dormouse's story
print()
print("             The <head> tag has only one child, but it has two descendants: the <title> tag")
print("             and the <title> tag’s child. The BeautifulSoup object only has one direct")
print("             child (the <html> tag), but it has a whole lot of descendants:\n")

print(f"                 len(list(soup.children)): {len(list(soup.children))}")         # 2
print(f"                 len(list(soup.descendants)): {len(list(soup.descendants))}\n")   # 25

print("           - .string\n")

print("             If a tag has only one child, and that child is a NavigableString, the child")
print("             is made available as .string:\n")

print(f"                 title_tag.string: {title_tag.string}\n")    # u'The Dormouse's story'

print("             If a tag’s only child is another tag, and that tag has a .string, then the")
print("             parent tag is considered to have the same .string as its child:\n")

print(f"                 head_tag.contents: {head_tag.contents}")	# [<title>The Dormouse's story</title>]
print(f"                 head_tag.string: {head_tag.string}\n")      # u'The Dormouse's story'

print("             If a tag contains more than one thing, then it’s not clear what .string")
print("             should refer to, so .string is defined to be None:\n")

print(f"                 print(soup.html.string): {print(soup.html.string)}\n")  # None

print("           - .strings and stripped_strings\n")

print("                 If there’s more than one thing inside a tag, you can still look at just the")
print("                 strings. Use the .strings generator:\n")

print("                     for string in soup.strings:")
print("                         print(repr(string))\n")

for string in soup.strings:
    print(f"                         {repr(string)}")
#                     # u"The Dormouse's story"
#                     # u'\n\n'
#                     # u"The Dormouse's story"
#                     # u'\n\n'
#                     # u'Once upon a time there were three little sisters; and their names were\n'
#                     # u'Elsie'
#                     # u',\n'
#                     # u'Lacie'
#                     # u' and\n'
#                     # u'Tillie'
#                     # u';\nand they lived at the bottom of a well.'
#                     # u'\n\n'
#                     # u'...'
#                     # u'\n'
print()
print("                 These strings tend to have a lot of extra whitespace, which you can remove by")
print("                 using the .stripped_strings generator instead:")
print()
print("                 for string in soup.stripped_strings:")
print("                     print(repr(string))\n")

for string in soup.stripped_strings:
    print(f"                     repr(string): {repr(string)}")
#                     # u"The Dormouse's story"
#                     # u"The Dormouse's story"
#                     # u'Once upon a time there were three little sisters; and their names were'
#                     # u'Elsie'
#                     # u','
#                     # u'Lacie'
#                     # u'and'
#                     # u'Tillie'
#                     # u';\nand they lived at the bottom of a well.'
#                     # u'...'
print()
print("                 Here, strings consisting entirely of whitespace are ignored, and whitespace at")
print("                 the beginning and end of strings is removed.\n\n\n")

print("2.  Going up\n")

print('   Continuing the “family tree” analogy, every tag and every string has a parent:')
print("   the tag that contains it.\n")

print("    a.  .parent\n")

print("        You can access an element’s parent with the .parent attribute. In the example")
print('        “three sisters” document, the <head> tag is the parent of the <title> tag:')
print("            title_tag = soup.title")
title_tag = soup.title
print(f"            title_tag: {title_tag}")   # <title>The Dormouse's story</title>
print(f"            title_tag.parent: {title_tag.parent}\n") # <head><title>The Dormouse's story</title></head>

print("             The title string itself has a parent: the <title> tag that contains it:")
print(f"                 title_tag.string.parent: {title_tag.string.parent}\n")   # <title>The Dormouse's story</title>

print("             The parent of a top-level tag like <html> is the BeautifulSoup object itself:")
print("                 html_tag = soup.html")
html_tag = soup.html
print(f"                 type(html_tag.parent): {type(html_tag.parent)}\n")   # <class 'bs4.BeautifulSoup'>

print("             And the .parent of a BeautifulSoup object is defined as None:")
print(f"                 soup.parent: {soup.parent}\n\n") # None

print("    b.  .parents\n")

print("        You can iterate over all of an element’s parents with .parents. This example")
print("        uses .parents to travel from an <a> tag buried deep within the document, to")
print("        the very top of the document:")
print("            link = soup.a")
link = soup.a
print(f"            link: {link}\n")    # <a class="sister" href="http://example.com/elsie" id="link1">Elsie</a>

print("""        for parent in link.parents:
            if parent is None:
                print(parent)
            else:
                print(parent.name)
""")
for parent in link.parents:
    if parent is None:
        print(f"              {parent}")
    else:
        print(f"            {parent.name}")
                # p
                # body
                # html
                # [document]
                # None
print('\n\n')
print("3.  Going sideways\n")
